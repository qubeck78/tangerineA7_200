{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"text",
				"textureBuffer"
			],
			[
				"te",
				"textureBuffer"
			],
			[
				"cpu",
				"cpurv"
			],
			[
				"tgc",
				"tgctx"
			],
			[
				"re",
				"responseMaxIdx"
			],
			[
				"res",
				"responseIdx"
			],
			[
				"respon",
				"responseMaxIdx"
			],
			[
				"c",
				"cmd"
			],
			[
				"sdc",
				"sdcsCMD1"
			],
			[
				"sdcs",
				"sdcsCMD0"
			],
			[
				"sp",
				"spiStatus"
			],
			[
				"ar",
				"argv"
			],
			[
				"emu",
				"emulator"
			],
			[
				"vi",
				"videoVSync"
			],
			[
				"ch3Dma",
				"ch3DmaPointerStart"
			],
			[
				"sd",
				"sdramDMAReadReg"
			],
			[
				"fe",
				"fetchData"
			],
			[
				"r",
				"rootRegs"
			],
			[
				"RV",
				"RV_ERROR"
			],
			[
				"num",
				"numDirEntries"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "",
			"file": "tangerineA7_200.srcs/sources_1/new/sdramDMA.vhd",
			"file_size": 49194,
			"file_write_time": 133718484644949997,
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					5,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAALiYAAAAAAAAuJgAAAAAAAAAAAAAAAPC/"
				]
			]
		}
	],
	"build_system": "",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/C++/C++ Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					"Run"
				]
			],
			[
				"Packages/C++/C++ Single File.sublime-build",
				""
			]
		],
		[
			[
				[
					"Packages/C++/C++ Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					"Run"
				],
				[
					"Packages/Makefile/Make.sublime-build",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"Clean"
				]
			],
			[
				"Packages/Makefile/Make.sublime-build",
				"Clean"
			]
		],
		[
			[
				[
					"Packages/C++/C++ Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					"Run"
				],
				[
					"Packages/Makefile/Make.sublime-build",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"Clean"
				],
				[
					"Packages/User/make run.sublime-build",
					""
				],
				[
					"Packages/User/make send.sublime-build",
					""
				]
			],
			[
				"Packages/User/make run.sublime-build",
				""
			]
		],
		[
			[
				[
					"Packages/C++/C++ Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					"Run"
				],
				[
					"Packages/Makefile/Make.sublime-build",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"Clean"
				],
				[
					"Packages/User/make send.sublime-build",
					""
				]
			],
			[
				"Packages/User/make send.sublime-build",
				""
			]
		],
		[
			[
				[
					"Packages/Makefile/Make.sublime-build",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"Clean"
				],
				[
					"Packages/User/make run.sublime-build",
					""
				],
				[
					"Packages/User/make send.sublime-build",
					""
				]
			],
			[
				"Packages/User/make send.sublime-build",
				""
			]
		],
		[
			[
				[
					"Packages/Makefile/Make.sublime-build",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"Clean"
				],
				[
					"Packages/User/make send.sublime-build",
					""
				]
			],
			[
				"Packages/User/make send.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"Package Control: ",
				"Package Control: Enable Package"
			],
			[
				"package control: install package",
				"Package Control: Install Package"
			],
			[
				"install package control",
				"Install Package Control"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 141.0,
		"history":
		[
			"help",
			"dir",
			"dire"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/A7BaseBoard/tangerineA7_200/tangerineA7_200.srcs/sources_1",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/A7BaseBoard/tangerineA7_200/tangerineA7_200.srcs/sources_1/new"
	],
	"file_history":
	[
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/A7BaseBoard/tangerineA7_200/tangerineA7_200.srcs/sources_1/new/i2sController.vhd",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/A7BaseBoard/tangerineA7_200/tangerineA7_200.srcs/sources_1/new/A7BoardTop.vhd",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/A7BaseBoard/tangerineA7_200/tangerineA7_200.srcs/sources_1/new/tangerineSOC.vhd",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/A7BaseBoard/tangerineA7_200/tangerineA7_200.srcs/sources_1/new/usbHost.vhd",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/A7BaseBoard/tangerineA7_200/tangerineA7_200.srcs/sources_1/new/blitter.vhd",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/A7BaseBoard/tangerineA7_200/tangerineA7_200.srcs/sources_1/new/sdramDMA.vhd",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/A7BaseBoard/tangerineA7_200/tangerineA7_200.srcs/sources_1/new/nekoRv.vhd",
		"/F/msys64/home/qubec/ProjektyGCCWindows/tangerineSOCEmulator/spiSdCardRegs.cpp",
		"/F/msys64/home/qubec/ProjektyGCCWindows/tangerineSOCEmulator/tgVideoOut.cpp",
		"/F/msys64/home/qubec/ProjektyGCCWindows/tangerineSOCEmulator/tangerine.cpp",
		"/F/msys64/home/qubec/ProjektyGCCWindows/tangerineSOCEmulator/emul.cpp",
		"/F/msys64/home/qubec/ProjektyGCCWindows/tangerineSOCEmulator/main.cpp",
		"/F/msys64/home/qubec/ProjektyGCCWindows/tangerineSOCEmulator/memio.h",
		"/F/msys64/home/qubec/ProjektyGCCWindows/tangerineSOCEmulator/emul.h",
		"/F/msys64/home/qubec/ProjektyGCCWindows/tangerineSOCEmulator/sdCard.cpp",
		"/F/msys64/home/qubec/ProjektyGCCWindows/tangerineSOCEmulator/tangerine.h",
		"/F/msys64/home/qubec/ProjektyGCCWindows/tangerineSOCEmulator/memio.cpp",
		"/F/msys64/home/qubec/ProjektyGCCWindows/tangerineSOCEmulator/srec.cpp",
		"/F/msys64/home/qubec/ProjektyGCCWindows/tangerineSOCEmulator/sdCard.h",
		"/F/msys64/home/qubec/ProjektyGCCWindows/tangerineSOCEmulator/disasm.cpp",
		"/F/msys64/home/qubec/ProjektyGCCWindows/tangerineSOCEmulator/gfTypes.h",
		"/F/msys64/home/qubec/ProjektyGCCWindows/tangerineSOCEmulator/disasm.h",
		"/F/msys64/home/qubec/ProjektyGCCWindows/tangerineSOCEmulator/usbHost.cpp",
		"/F/msys64/home/qubec/ProjektyGCCWindows/tangerineSOCEmulator/usbHostRegs.cpp",
		"/F/msys64/home/qubec/ProjektyGCCWindows/tangerineSOCEmulator/usbHostRegs.h",
		"/F/msys64/home/qubec/ProjektyGCCWindows/tangerineSOCEmulator/usbHost.h",
		"/F/msys64/home/qubec/ProjektyGCCWindows/tangerineSOCEmulator/tgVideoOut.h",
		"/F/msys64/home/qubec/ProjektyGCCWindows/tangerineSOCEmulator/rootRegs.cpp",
		"/F/msys64/home/qubec/ProjektyGCCWindows/tangerineSOCEmulator/rootRegs.h",
		"/F/msys64/home/qubec/ProjektyGCCWindows/tangerineSOCEmulator/sdramDmaRegs.h",
		"/F/msys64/home/qubec/ProjektyGCCWindows/tangerineSOCEmulator/sdramDmaRegs.cpp",
		"/F/msys64/home/qubec/ProjektyGCCWindows/tangerineSOCEmulator/spiSdCardRegs.h",
		"/F/msys64/home/qubec/ProjektyGCCWindows/tangerineSOCEmulator/srec.h",
		"/F/msys64/home/qubec/ProjektyGCCWindows/tangerineSOCEmulator/Makefile",
		"/F/msys64/home/qubec/ProjektyGCCWindows/tangerineSOCEmulator/spiSDCardRegs.h",
		"/F/msys64/home/qubec/ProjektyGCCWindows/tangerineSOCEmulator/spiSDCardRegs.cpp",
		"/F/msys64/home/qubec/ProjektyGCCWindows/tangerineSOCEmulator/sdramDma.h",
		"/F/msys64/home/qubec/ProjektyGCCWindows/tangerineSOCEmulator/sdramDma.cpp",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/A7BaseBoard/tangerineA7_200/Software/slideshow/main.cpp",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/A7BaseBoard/tangerineA7_200/Software/slideshow/ram.ld",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/A7BaseBoard/tangerineA7_200/Software/slideshow/Makefile",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/A7BaseBoard/tangerineA7_200/Software/gfxLib/bsp.cpp",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/A7BaseBoard/tangerineA7_200/Software/gfxLib/gfBitmap.cpp",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/A7BaseBoard/tangerineA7_200/Software/gfxLib/gfBitmap.h",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/A7BaseBoard/tangerineA7_200/Software/gfxLib/gfTypes.h",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/A7BaseBoard/tangerineA7_200/Software/gfxLib/bsp.h",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/TangNano20K/tangyRiscVSOC/tangyRiscVSOC/src/software/gfxLib/diskio.cpp",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/TangNano20K/tangyRiscVSOC/tangyRiscVSOC/src/software/gfxLib/gfBitmap.cpp",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/TangNano20K/tangyRiscVSOC/tangyRiscVSOC/src/software/gfxLib/bsp.cpp",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/TangNano20K/tangyRiscVSOC/tangyRiscVSOC/src/software/gfxLib/bsp.h",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/TangNano20K/tangyRiscVSOC/tangyRiscVSOC/src/software/gfxLib/gfTypes.h",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/TangNano20K/tangyRiscVSOC/tangyRiscVSOC/src/software/slideshow/Makefile",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/TangNano20K/tangyRiscVSOC/tangyRiscVSOC/src/software/slideshow/ram.ld",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/TangNano20K/tangyRiscVSOC/tangyRiscVSOC/src/software/slideshow/startup.S",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/C4BaseBoard/RiscVSOCQ13/sramController.vhd",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/C4BaseBoard/RiscVSOCQ13/software/gfxLib/osFile.cpp",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/C4BaseBoard/RiscVSOCQ13/software/gfxLib/bsp.h",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/C4BaseBoard/RiscVSOCQ13/software/gfxLib/bsp.cpp",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/C4BaseBoard/RiscVSOCQ13/software/slideshow/startup.S",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/C4BaseBoard/RiscVSOCQ13/software/gfxLib/diskio.h",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/C4BaseBoard/RiscVSOCQ13/software/slideshow/Makefile",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/C4BaseBoard/RiscVSOCQ13/software/slideshow/main.cpp",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/C4BaseBoard/RiscVSOCQ13/software/gfxLib/diskio.cpp",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/C4BaseBoard/RiscVSOCQ13/C4RiscVSOCTop.vhd",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/C4BaseBoard/RiscV/gfxLib/osUIEvents.h",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/C4BaseBoard/RiscV/gfxLib/usbHID.cpp",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/C4BaseBoard/RiscV/gfxLib/bsp.h",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/C4BaseBoard/RiscV/gfxLib/bsp.cpp",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/C4BaseBoard/RiscV/gfxLib/gfFont.h",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/C4BaseBoard/RiscV/gfxLib/gfFont.cpp",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/C4BaseBoard/RiscV/gfxLib/gfDrawing.h",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/C4BaseBoard/RiscV/gfxLib/gfJPEG.cpp",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/C4BaseBoard/RiscV/gfxLib/gfBitmap.cpp",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/C4BaseBoard/RiscV/gfxLibSlideshow/ram.ld",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/C4BaseBoard/RiscV/gfxLib/gfBitmap.h",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/C4BaseBoard/RiscV/gfxLib/gfDrawing.cpp",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/C4BaseBoard/RiscV/gfxLibSlideshow/main.cpp",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/C4BaseBoard/RiscV/gfxLibSlideshow/startup.S",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/C4BaseBoard/RiscV/gfxLibSlideshow/main.h",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/C4BaseBoard/RiscV/gfxLib/picojpeg.cpp",
		"/C/Users/qubec/AppData/Roaming/Sublime Text/Packages/User/make send.sublime-build",
		"/C/Users/qubec/AppData/Roaming/Sublime Text/Packages/User/Preferences.sublime-settings",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/C4BaseBoard/RiscV/gfxLibSlideshow/slideshowProject.sublime-project",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/C4BaseBoard/RiscV/gfxLibSlideshow/Makefile",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/C4BaseBoard/RiscV/usbHidTest/main.cpp"
	],
	"find":
	{
		"height": 28.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"usb2dp",
			"usb ho",
			"sdcCh3Read9",
			"sdcCh1Read7",
			"sdcCh1Write8",
			"sdcCh1Read8",
			"sdcCh0Write7",
			"0110011"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": true,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"file": "tangerineA7_200.srcs/sources_1/new/sdramDMA.vhd",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/VHDL Mode/Syntax/VHDL.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5769.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 28.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 219.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "tangerineA7_200_sublime.sublime-project",
	"replace":
	{
		"height": 52.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"F:\\msys64\\home\\qubec\\ProjektyGCCWindows\\tangerineSOCEmulator\\tangerine.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 177.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
