{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"text",
				"textureBuffer"
			],
			[
				"te",
				"textureBuffer"
			],
			[
				"cpu",
				"cpurv"
			],
			[
				"tgc",
				"tgctx"
			],
			[
				"re",
				"responseMaxIdx"
			],
			[
				"res",
				"responseIdx"
			],
			[
				"respon",
				"responseMaxIdx"
			],
			[
				"c",
				"cmd"
			],
			[
				"sdc",
				"sdcsCMD1"
			],
			[
				"sdcs",
				"sdcsCMD0"
			],
			[
				"sp",
				"spiStatus"
			],
			[
				"ar",
				"argv"
			],
			[
				"emu",
				"emulator"
			],
			[
				"vi",
				"videoVSync"
			],
			[
				"ch3Dma",
				"ch3DmaPointerStart"
			],
			[
				"sd",
				"sdramDMAReadReg"
			],
			[
				"fe",
				"fetchData"
			],
			[
				"r",
				"rootRegs"
			],
			[
				"RV",
				"RV_ERROR"
			],
			[
				"num",
				"numDirEntries"
			]
		]
	},
	"buffers":
	[
		{
			"file": "tangerineA7_200.srcs/sources_1/new/blitter.vhd",
			"settings":
			{
				"buffer_size": 37006,
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					34,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAACkjQAALS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQotLSBDb21wYW55OiAKLS0gRW5naW5lZXI6IAotLSAKLS0gQ3JlYXRlIERhdGU6IDA4LzIzLzIwMjQgMDE6NTU6MjQgUE0KLS0gRGVzaWduIE5hbWU6IAotLSBNb2R1bGUgTmFtZTogYmxpdHRlciAtIEJlaGF2aW9yYWwKLS0gUHJvamVjdCBOYW1lOiAKLS0gVGFyZ2V0IERldmljZXM6IAotLSBUb29sIFZlcnNpb25zOiAKLS0gRGVzY3JpcHRpb246IAotLSAKLS0gRGVwZW5kZW5jaWVzOiAKLS0gCi0tIFJldmlzaW9uOgotLSBSZXZpc2lvbiAwLjAxIC0gRmlsZSBDcmVhdGVkCi0tIEFkZGl0aW9uYWwgQ29tbWVudHM6Ci0tIAotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgoKbGlicmFyeSBJRUVFOwp1c2UgSUVFRS5TVERfTE9HSUNfMTE2NC5BTEw7CnVzZSBJRUVFLk5VTUVSSUNfU1RELkFMTDsKCmxpYnJhcnkgVU5JU0lNOwp1c2UgVU5JU0lNLlZDb21wb25lbnRzLmFsbDsKCmVudGl0eSBibGl0dGVyIGlzCnBvcnQoIAogICAgCiAgICAtLXJlc2V0LCBjbG9ja3MKCiAgICByZXNldDogICAgICAgICAgaW4gICAgICBzdGRfbG9naWM7CiAgICBjbG9jazogICAgICAgICAgaW4gICAgICBzdGRfbG9naWM7CgogICAtLWJ1cyBpbnRlcmZhY2UgKCByZWdpc3RlcnMgKQoKICAgIGE6ICAgICAgICAgICAgICAgICAgaW4gICAgICBzdGRfbG9naWNfdmVjdG9yKCAxNSBkb3dudG8gMCApOwogICAgZGluOiAgICAgICAgICAgICAgICBpbiAgICAgIHN0ZF9sb2dpY192ZWN0b3IoIDMxIGRvd250byAwICk7CiAgICBkb3V0OiAgICAgICAgICAgICAgIG91dCAgICAgc3RkX2xvZ2ljX3ZlY3RvciggMzEgZG93bnRvIDAgKTsKICAgIGNlOiAgICAgICAgICAgICAgICAgaW4gICAgICBzdGRfbG9naWM7CiAgICB3cjogICAgICAgICAgICAgICAgIGluICAgICAgc3RkX2xvZ2ljOwogICAgZGF0YU1hc2s6ICAgICAgICAgICBpbiAgICAgIHN0ZF9sb2dpY192ZWN0b3IoIDMgZG93bnRvIDAgKTsKICAgIHJlYWR5OiAgICAgICAgICAgICAgb3V0ICAgICBzdGRfbG9naWM7CgogICAgLS1kbWEgaW50ZXJmYWNlCiAgICAKICAgIGJsdERtYVJlcXVlc3Q6ICAgICAgb3V0ICAgICBzdGRfbG9naWM7CiAgICBibHREbWFSZWFkeTogICAgICAgIGluICAgICAgc3RkX2xvZ2ljOwogICAgYmx0RG1hV29yZFNpemU6ICAgICBvdXQgICAgIHN0ZF9sb2dpYzsKICAgIGJsdEE6ICAgICAgICAgICAgICAgb3V0ICAgICBzdGRfbG9naWNfdmVjdG9yKCAyNCBkb3dudG8gMCApOwogICAgYmx0RGluOiAgICAgICAgICAgICBpbiAgICAgIHN0ZF9sb2dpY192ZWN0b3IoIDMxIGRvd250byAwICk7CiAgICBibHREb3V0OiAgICAgICAgICAgIG91dCAgICAgc3RkX2xvZ2ljX3ZlY3RvciggMzEgZG93bnRvIDAgKTsKICAgIGJsdFdyOiAgICAgICAgICAgICAgb3V0ICAgICBzdGRfbG9naWMKICAgIAopOwplbmQgYmxpdHRlcjsKCmFyY2hpdGVjdHVyZSBCZWhhdmlvcmFsIG9mIGJsaXR0ZXIgaXMKCi0tY29tcG9uZW50cwoKLS0gcGl4ZWwgYWxwaGEgY2hhbm5lbCBjYWxjdWxhdG9yCgpjb21wb25lbnQgcGl4ZWxBbHBoYSBpcwpwb3J0KAoKICAgIHJlc2V0OiAgICAgIGluICBzdGRfbG9naWM7CiAgICBjbG9jazogICAgICBpbiAgc3RkX2xvZ2ljOwoJIAkgCiAgICBjb2xvckluQTogICBpbiAgc3RkX2xvZ2ljX3ZlY3RvciggMTUgZG93bnRvIDAgKTsKICAgIGNvbG9ySW5COiAgIGluICBzdGRfbG9naWNfdmVjdG9yKCAxNSBkb3dudG8gMCApOwogICAgYWxwaGE6ICAgICAgaW4gIHN0ZF9sb2dpY192ZWN0b3IoIDQgZG93bnRvIDAgKTsKICAgIGNvbG9yT3V0OiAgIG91dCBzdGRfbG9naWNfdmVjdG9yKCAxNSBkb3dudG8gMCApCgopOwplbmQgY29tcG9uZW50OwoKCi0tc2lnbmFscwoKLS1yZWdpc3RlcnMgc2lnbmFscwoKdHlwZSByZWdTdGF0ZV9UIGlzICggcnNXYWl0Rm9yUmVnQWNjZXNzLCByc1dhaXRGb3JCdXNDeWNsZUVuZCApOwpzaWduYWwgcmVnU3RhdGU6ICAgICAgICByZWdTdGF0ZV9UOwoKLS1jb21tYW5kL3N0YXR1cwoKc2lnbmFsICBjb21tYW5kUmVnOiAgICAgc3RkX2xvZ2ljX3ZlY3RvciggMzEgZG93bnRvIDAgKTsKCi0tZ2VuZXJhbCBwdXJwb3NlIHJlZ2lzdGVycwoKc2lnbmFsICBpbnB1dDBSZWc6ICAgICAgc3RkX2xvZ2ljX3ZlY3RvciggMzEgZG93bnRvIDAgKTsKc2lnbmFsICBpbnB1dDFSZWc6ICAgICAgc3RkX2xvZ2ljX3ZlY3RvciggMzEgZG93bnRvIDAgKTsKc2lnbmFsICBpbnB1dDJSZWc6ICAgICAgc3RkX2xvZ2ljX3ZlY3RvciggMzEgZG93bnRvIDAgKTsKc2lnbmFsICBpbnB1dDNSZWc6ICAgICAgc3RkX2xvZ2ljX3ZlY3RvciggMzEgZG93bnRvIDAgKTsKCgotLXNvdXJjZXMKCnNpZ25hbCAgc2FBZGRyZXNzUmVnOiAgIHN0ZF9sb2dpY192ZWN0b3IoIDMxIGRvd250byAwICk7CnNpZ25hbCAgc2FSb3dXaWR0aFJlZzogIHN0ZF9sb2dpY192ZWN0b3IoIDE1IGRvd250byAwICk7CnNpZ25hbCAgc2FXaWR0aFJlZzogICAgIHN0ZF9sb2dpY192ZWN0b3IoIDE1IGRvd250byAwICk7CnNpZ25hbCAgc2FIZWlnaHRSZWc6ICAgIHN0ZF9sb2dpY192ZWN0b3IoIDE1IGRvd250byAwICk7CgpzaWduYWwgIHNiQWRkcmVzc1JlZzogICBzdGRfbG9naWNfdmVjdG9yKCAzMSBkb3dudG8gMCApOwpzaWduYWwgIHNiUm93V2lkdGhSZWc6ICBzdGRfbG9naWNfdmVjdG9yKCAxNSBkb3dudG8gMCApOwoKc2lnbmFsICBzY0FkZHJlc3NSZWc6ICAgc3RkX2xvZ2ljX3ZlY3RvciggMzEgZG93bnRvIDAgKTsKc2lnbmFsICBzY1Jvd1dpZHRoUmVnOiAgc3RkX2xvZ2ljX3ZlY3RvciggMTUgZG93bnRvIDAgKTsKCi0tZGVzdGluYXRpb25zCgpzaWduYWwgIGRhQWRkcmVzc1JlZzogICBzdGRfbG9naWNfdmVjdG9yKCAzMSBkb3dudG8gMCApOwpzaWduYWwgIGRhUm93V2lkdGhSZWc6ICBzdGRfbG9naWNfdmVjdG9yKCAxNSBkb3dudG8gMCApOwpzaWduYWwgIGRhV2lkdGhSZWc6ICAgICBzdGRfbG9naWNfdmVjdG9yKCAxNSBkb3dudG8gMCApOwpzaWduYWwgIGRhSGVpZ2h0UmVnOiAgICBzdGRfbG9naWNfdmVjdG9yKCAxNSBkb3dudG8gMCApOwoKc2lnbmFsICBkYkFkZHJlc3NSZWc6ICAgc3RkX2xvZ2ljX3ZlY3RvciggMzEgZG93bnRvIDAgKTsKc2lnbmFsICBkYlJvd1dpZHRoUmVnOiAgc3RkX2xvZ2ljX3ZlY3RvciggMTUgZG93bnRvIDAgKTsKCi0tY2FsY3VsYXRlZCByZWdpc3RlcnMKCnNpZ25hbCAgc2FDb2xBZGQ6ICAgICAgIHN0ZF9sb2dpY192ZWN0b3IoIDE1IGRvd250byAwICk7CnNpZ25hbCAgc2JDb2xBZGQ6ICAgICAgIHN0ZF9sb2dpY192ZWN0b3IoIDE1IGRvd250byAwICk7CnNpZ25hbCAgc2NDb2xBZGQ6ICAgICAgIHN0ZF9sb2dpY192ZWN0b3IoIDE1IGRvd250byAwICk7CnNpZ25hbCAgZGFDb2xBZGQ6ICAgICAgIHN0ZF9sb2dpY192ZWN0b3IoIDE1IGRvd250byAwICk7CnNpZ25hbCAgZGJDb2xBZGQ6ICAgICAgIHN0ZF9sb2dpY192ZWN0b3IoIDE1IGRvd250byAwICk7CgotLWZzbQoKdHlwZSAgICBibHRTdGF0ZV90IGlzICggYnNJZGxlLCAKICAgICAgICAgICAgICAgICAgICAgICAgYnNGaWxsMCwgYnNGaWxsMSwKICAgICAgICAgICAgICAgICAgICAgICAgYnNDb3B5MCwgYnNDb3B5MSwgYnNDb3B5MiwgCiAgICAgICAgICAgICAgICAgICAgICAgIGJzQWxwaGFDb3B5MCwgYnNBbHBoYUNvcHkxLCBic0FscGhhQ29weTIsIGJzQWxwaGFDb3B5MywgYnNBbHBoYUNvcHk0LCBic0FscGhhQ29weTUsICAKICAgICAgICAgICAgICAgICAgICAgICAgYnNTY2FsZUNvcHkwLCBic1NjYWxlQ29weTEsIGJzU2NhbGVDb3B5MiwgYnNTY2FsZUNvcHkzLCBic1NjYWxlQ29weTQsIGJzU2NhbGVDb3B5NSwKICAgICAgICAgICAgICAgICAgICAgICAgYnNTdWJSZWFkMCwgYnNTdWJSZWFkMSwgYnNTdWJSZWFkMiwgYnNTdWJXcml0ZTAsIGJzU3ViV3JpdGUxLCBic1N1YldyaXRlMiwgYnNTdWJXcml0ZTMgKTsKCnNpZ25hbCAgYmx0U3RhdGU6ICAgICAgIGJsdFN0YXRlX3Q7CnNpZ25hbCAgYmx0UmV0dXJuU3RhdGU6IGJsdFN0YXRlX3Q7CgotLWJsaXR0ZXIgY29tbWFuZCB0cmlnZ2VyCgpzaWduYWwgIGJsdFJ1bjogICAgICAgICBzdGRfbG9naWM7CnNpZ25hbCAgYmx0UmVhZHk6ICAgICAgIHN0ZF9sb2dpYzsKCi0tc3ViUmVhZApzaWduYWwgZG1hUmVhZEFkZHI6ICAgICBzdGRfbG9naWNfdmVjdG9yKCAyNCBkb3dudG8gMCApOwpzaWduYWwgZG1hUmVhZERhdGE6ICAgICBzdGRfbG9naWNfdmVjdG9yKCAzMSBkb3dudG8gMCApOwoKLS1zdWJXcml0ZQpzaWduYWwgZG1hV3JpdGVBZGRyOiAgICBzdGRfbG9naWNfdmVjdG9yKCAyNCBkb3dudG8gMCApOwpzaWduYWwgZG1hV3JpdGVEYXRhOiAgICBzdGRfbG9naWNfdmVjdG9yKCAzMSBkb3dudG8gMCApOwoKCi0tY291bnRlcnMKc2lnbmFsIGNvdW50ZXJYOiAgICAgICAgc3RkX2xvZ2ljX3ZlY3RvciggMTUgZG93bnRvIDAgKTsKc2lnbmFsIGNvdW50ZXJYTWF4OiAgICAgc3RkX2xvZ2ljX3ZlY3RvciggMTUgZG93bnRvIDAgKTsKc2lnbmFsIGNvdW50ZXJZOiAgICAgICAgc3RkX2xvZ2ljX3ZlY3RvciggMTUgZG93bnRvIDAgKTsKCi0tZGF0YSBwb2ludGVycyAoIGZvciBtdWx0aXBsZSBzb3VyY2UgLyBkZXN0aW5hdGlvbiBtb2RlcyApCnNpZ25hbCBkcFNhOiAgICAgICAgICAgIHN0ZF9sb2dpY192ZWN0b3IoIDI0IGRvd250byAwICk7CnNpZ25hbCBkcFNiOiAgICAgICAgICAgIHN0ZF9sb2dpY192ZWN0b3IoIDI0IGRvd250byAwICk7CnNpZ25hbCBkcFNjOiAgICAgICAgICAgIHN0ZF9sb2dpY192ZWN0b3IoIDI0IGRvd250byAwICk7CnNpZ25hbCBkcERhOiAgICAgICAgICAgIHN0ZF9sb2dpY192ZWN0b3IoIDI0IGRvd250byAwICk7CnNpZ25hbCBkcERiOiAgICAgICAgICAgIHN0ZF9sb2dpY192ZWN0b3IoIDI0IGRvd250byAwICk7CgoKLS1waXhlbCBhbHBoYQpzaWduYWwgcGFDb2xvckluQTogICAgICBzdGRfbG9naWNfdmVjdG9yKCAxNSBkb3dudG8gMCApOwpzaWduYWwgcGFDb2xvckluQjogICAgICBzdGRfbG9naWNfdmVjdG9yKCAxNSBkb3dudG8gMCApOwpzaWduYWwgcGFBbHBoYTogICAgICAgICBzdGRfbG9naWNfdmVjdG9yKCA0IGRvd250byAwICk7CnNpZ25hbCBwYUNvbG9yT3V0OiAgICAgIHN0ZF9sb2dpY192ZWN0b3IoIDE1IGRvd250byAwICk7CgoKLS1zY2FsZXIKc2lnbmFsIHNjU3g6ICAgICAgICAgICAgc3RkX2xvZ2ljX3ZlY3RvciggMzEgZG93bnRvIDAgKTsKc2lnbmFsIHNjU3k6ICAgICAgICAgICAgc3RkX2xvZ2ljX3ZlY3RvciggMzEgZG93bnRvIDAgKTsKCmJlZ2luICAKICAgICAgICAKIApyZWdpc3RlcnM6IHByb2Nlc3MoIGFsbCApCgpiZWdpbgoKICAgICAKICAgIGlmIHJlc2V0ID0gJzEnIHRoZW4KCiAgICAgICAgLS1jcHUgYnVzCiAgICAgICAgcmVhZHkgICAgICAgICAgIDw9ICcwJzsgIAogICAgICAgICAgICAgICAgICAgCiAgICAgICAgLS1jbGVhciByZWdpc3RlcnMKICAgICAgICBjb21tYW5kUmVnICAgICAgPD0gKCBvdGhlcnMgPT4gJzAnICk7CiAgICAgICAgaW5wdXQwUmVnICAgICAgIDw9ICggb3RoZXJzID0+ICcwJyApOwogICAgICAgIGlucHV0MVJlZyAgICAgICA8PSAoIG90aGVycyA9PiAnMCcgKTsKICAgICAgICBpbnB1dDJSZWcgICAgICAgPD0gKCBvdGhlcnMgPT4gJzAnICk7CiAgICAgICAgaW5wdXQzUmVnICAgICAgIDw9ICggb3RoZXJzID0+ICcwJyApOwogICAgICAgIHNhQWRkcmVzc1JlZyAgICA8PSAoIG90aGVycyA9PiAnMCcgKTsKICAgICAgICBzYVJvd1dpZHRoUmVnICAgPD0gKCBvdGhlcnMgPT4gJzAnICk7CiAgICAgICAgc2FXaWR0aFJlZyAgICAgIDw9ICggb3RoZXJzID0+ICcwJyApOwogICAgICAgIHNhSGVpZ2h0UmVnICAgICA8PSAoIG90aGVycyA9PiAnMCcgKTsKICAgICAgICBzYkFkZHJlc3NSZWcgICAgPD0gKCBvdGhlcnMgPT4gJzAnICk7CiAgICAgICAgc2JSb3dXaWR0aFJlZyAgIDw9ICggb3RoZXJzID0+ICcwJyApOwogICAgICAgIHNjQWRkcmVzc1JlZyAgICA8PSAoIG90aGVycyA9PiAnMCcgKTsKICAgICAgICBzY1Jvd1dpZHRoUmVnICAgPD0gKCBvdGhlcnMgPT4gJzAnICk7CiAgICAgICAgZGFBZGRyZXNzUmVnICAgIDw9ICggb3RoZXJzID0+ICcwJyApOwogICAgICAgIGRhUm93V2lkdGhSZWcgICA8PSAoIG90aGVycyA9PiAnMCcgKTsKICAgICAgICBkYVdpZHRoUmVnICAgICAgPD0gKCBvdGhlcnMgPT4gJzAnICk7CiAgICAgICAgZGFIZWlnaHRSZWcgICAgIDw9ICggb3RoZXJzID0+ICcwJyApOwogICAgICAgIGRiQWRkcmVzc1JlZyAgICA8PSAoIG90aGVycyA9PiAnMCcgKTsKICAgICAgICBkYlJvd1dpZHRoUmVnICAgPD0gKCBvdGhlcnMgPT4gJzAnICk7CiAgICAgICAgCiAgICAgICAgLS1jbGVhciBjb21tYW5kIHRyaWdnZXIKICAgICAgICAKICAgICAgICBibHRSdW4gICAgICAgICAgPD0gJzAnOwogICAgICAgIAogICAgZWxzaWYgcmlzaW5nX2VkZ2UoIGNsb2NrICkgdGhlbgogICAgICAKICAgICAgICAtLWNsZWFyIGNvbW1hbmQgdHJpZ2dlcgogICAgICAgIAogICAgICAgIGJsdFJ1biAgICAgICAgICA8PSAnMCc7CgogICAgICAgIGNhc2UgcmVnU3RhdGUgaXMKICAKICAgICAgICAgICAgd2hlbiByc1dhaXRGb3JSZWdBY2Nlc3MgPT4KICAgICAgICAKICAgICAgICAgICAgICAgIGlmIGNlID0gJzEnIHRoZW4KICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAtLWNwdSB3YW50cyB0byBhY2Nlc3MgcmVnaXN0ZXJzCiAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgcmVhZHkgPD0gJzAnOwogICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIGNhc2UgYSggNyBkb3dudG8gMCApIGlzCiAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIC0tMHgwMCByLSBpZCAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgd2hlbiB4IjAwIiA9PgogICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVhZHkgICA8PSAnMSc7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZG91dCAgICA8PSB4IjgwMDAwMDA1IjsgICAtLSBibGl0dGVyIGlkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgLS0weDA0IHItIGNvbXBvbmVudCB2ZXJzaW9uICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgd2hlbiB4IjAxIiA9PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlYWR5ICAgPD0gJzEnOwogICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZG91dCAgICA8PSB4IjIwMjQwOTE4IjsKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgLS0weDA4IHJ3IGNvbW1hbmRSZWcKICAgICAgICAgICAgICAgICAgICAgICAgd2hlbiB4IjAyIiA9PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlYWR5ICAgPD0gJzEnOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb3V0ICAgIDw9IHgiMDAwMDAwMCIgJiAiMDAwIiAmIGJsdFJlYWR5OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiB3ciA9ICcxJyB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21tYW5kUmVnICAgIDw9IGRpbjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtLXNldCBjb21tYW5kIHRyaWdnZXIKICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBibHRSdW4gICAgICAgICAgPD0gJzEnOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZCBpZjsKCiAgICAgICAgICAgICAgICAgICAgICAgIC0tMHgwYyBydyBpbnB1dDBSZWcKICAgICAgICAgICAgICAgICAgICAgICAgd2hlbiB4IjAzIiA9PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlYWR5ICAgPD0gJzEnOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvdXQgICAgPD0gaW5wdXQwUmVnOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiB3ciA9ICcxJyB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dDBSZWcgICA8PSBkaW47CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQgaWY7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgLS0weDEwIHJ3IGlucHV0MVJlZwogICAgICAgICAgICAgICAgICAgICAgICB3aGVuIHgiMDQiID0+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVhZHkgICA8PSAnMSc7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZG91dCAgICA8PSBpbnB1dDFSZWc7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIHdyID0gJzEnIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0MVJlZyAgIDw9IGRpbjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZCBpZjsKCiAgICAgICAgICAgICAgICAgICAgICAgIC0tMHgxNCBydyBpbnB1dDJSZWcKICAgICAgICAgICAgICAgICAgICAgICAgd2hlbiB4IjA1IiA9PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlYWR5ICAgPD0gJzEnOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvdXQgICAgPD0gaW5wdXQyUmVnOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiB3ciA9ICcxJyB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dDJSZWcgICA8PSBkaW47CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQgaWY7CgogICAgICAgICAgICAgICAgICAgICAgICAtLTB4MTggcncgaW5wdXQzUmVnCiAgICAgICAgICAgICAgICAgICAgICAgIHdoZW4geCIwNiIgPT4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWFkeSAgIDw9ICcxJzsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb3V0ICAgIDw9IGlucHV0M1JlZzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgd3IgPSAnMScgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQzUmVnICAgPD0gZGluOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kIGlmOwoKICAgICAgICAgICAgICAgICAgICAgICAgLS0weDFjIHJ3IHNhQWRkcmVzc1JlZwogICAgICAgICAgICAgICAgICAgICAgICB3aGVuIHgiMDciID0+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVhZHkgICA8PSAnMSc7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZG91dCAgICA8PSBzYUFkZHJlc3NSZWc7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgd3IgPSAnMScgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2FBZGRyZXNzUmVnICAgIDw9IGRpbjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZCBpZjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAtLTB4MjAgcncgc2FSb3dXaWR0aFJlZwogICAgICAgICAgICAgICAgICAgICAgICB3aGVuIHgiMDgiID0+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVhZHkgICA8PSAnMSc7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZG91dCAgICA8PSB4IjAwMDAiICYgc2FSb3dXaWR0aFJlZzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiB3ciA9ICcxJyB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzYVJvd1dpZHRoUmVnICAgIDw9IGRpbiggMTUgZG93bnRvIDAgKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZCBpZjsKCiAgICAgICAgICAgICAgICAgICAgICAgIC0tMHgyNCBydyBzYVdpZHRoUmVnCiAgICAgICAgICAgICAgICAgICAgICAgIHdoZW4geCIwOSIgPT4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWFkeSAgIDw9ICcxJzsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb3V0ICAgIDw9IHgiMDAwMCIgJiBzYVdpZHRoUmVnOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIHdyID0gJzEnIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNhV2lkdGhSZWcgICAgPD0gZGluKCAxNSBkb3dudG8gMCApOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kIGlmOwoKICAgICAgICAgICAgICAgICAgICAgICAgLS0weDI4IHJ3IHNhSGVpZ2h0UmVnCiAgICAgICAgICAgICAgICAgICAgICAgIHdoZW4geCIwYSIgPT4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWFkeSAgIDw9ICcxJzsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb3V0ICAgIDw9IHgiMDAwMCIgJiBzYUhlaWdodFJlZzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiB3ciA9ICcxJyB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzYUhlaWdodFJlZyAgICA8PSBkaW4oIDE1IGRvd250byAwICk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQgaWY7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgLS0weDJjIHJ3IHNiQWRkcmVzc1JlZwogICAgICAgICAgICAgICAgICAgICAgICB3aGVuIHgiMGIiID0+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVhZHkgICA8PSAnMSc7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZG91dCAgICA8PSBzYkFkZHJlc3NSZWc7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgd3IgPSAnMScgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2JBZGRyZXNzUmVnICAgIDw9IGRpbjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZCBpZjsKCiAgICAgICAgICAgICAgICAgICAgICAgIC0tMHgzMCBydyBzYlJvd1dpZHRoUmVnCiAgICAgICAgICAgICAgICAgICAgICAgIHdoZW4geCIwYyIgPT4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWFkeSAgIDw9ICcxJzsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb3V0ICAgIDw9IHgiMDAwMCIgJiBzYlJvd1dpZHRoUmVnOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIHdyID0gJzEnIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNiUm93V2lkdGhSZWcgICAgPD0gZGluKCAxNSBkb3dudG8gMCApOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kIGlmOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIC0tMHgzNCBydyBzY0FkZHJlc3NSZWcKICAgICAgICAgICAgICAgICAgICAgICAgd2hlbiB4IjBkIiA9PgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlYWR5ICAgPD0gJzEnOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvdXQgICAgPD0gc2NBZGRyZXNzUmVnOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgd3IgPSAnMScgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NBZGRyZXNzUmVnICAgIDw9IGRpbjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZCBpZjsKCiAgICAgICAgICAgICAgICAgICAgICAgIC0tMHgzOCBydyBzY1Jvd1dpZHRoUmVnCiAgICAgICAgICAgICAgICAgICAgICAgIHdoZW4geCIwZSIgPT4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWFkeSAgIDw9ICcxJzsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb3V0ICAgIDw9IHgiMDAwMCIgJiBzY1Jvd1dpZHRoUmVnOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgd3IgPSAnMScgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NSb3dXaWR0aFJlZyAgICA8PSBkaW4oIDE1IGRvd250byAwICk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQgaWY7CgogICAgICAgICAgICAgICAgICAgICAgICAtLTB4M2MgcncgZGFBZGRyZXNzUmVnCiAgICAgICAgICAgICAgICAgICAgICAgIHdoZW4geCIwZiIgPT4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWFkeSAgIDw9ICcxJzsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb3V0ICAgIDw9IGRhQWRkcmVzc1JlZzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgd3IgPSAnMScgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGFBZGRyZXNzUmVnICAgIDw9IGRpbjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZCBpZjsKCiAgICAgICAgICAgICAgICAgICAgICAgIC0tMHg0MCBydyBkYVJvd1dpZHRoUmVnCiAgICAgICAgICAgICAgICAgICAgICAgIHdoZW4geCIxMCIgPT4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb3V0ICAgIDw9IHgiMDAwMCIgJiBkYVJvd1dpZHRoUmVnOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWFkeSAgIDw9ICcxJzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgd3IgPSAnMScgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGFSb3dXaWR0aFJlZyAgICA8PSBkaW4oIDE1IGRvd250byAwICk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQgaWY7CgogICAgICAgICAgICAgICAgICAgICAgICAtLTB4NDQgcncgZGFXaWR0aFJlZwogICAgICAgICAgICAgICAgICAgICAgICB3aGVuIHgiMTEiID0+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVhZHkgICA8PSAnMSc7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZG91dCAgICA8PSB4IjAwMDAiICYgZGFXaWR0aFJlZzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIHdyID0gJzEnIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhV2lkdGhSZWcgICAgPD0gZGluKCAxNSBkb3dudG8gMCApOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kIGlmOwoKICAgICAgICAgICAgICAgICAgICAgICAgLS0weDQ4IHJ3IGRhSGVpZ2h0UmVnCiAgICAgICAgICAgICAgICAgICAgICAgIHdoZW4geCIxMiIgPT4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWFkeSAgIDw9ICcxJzsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb3V0ICAgIDw9IHgiMDAwMCIgJiBkYUhlaWdodFJlZzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIHdyID0gJzEnIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhSGVpZ2h0UmVnICAgIDw9IGRpbiggMTUgZG93bnRvIDAgKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZCBpZjsKCiAgICAgICAgICAgICAgICAgICAgICAgIC0tMHg0YyBydyBkYUhlaWdodFJlZwogICAgICAgICAgICAgICAgICAgICAgICB3aGVuIHgiMTMiID0+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVhZHkgICA8PSAnMSc7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZG91dCAgICA8PSBkYkFkZHJlc3NSZWc7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiB3ciA9ICcxJyB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYkFkZHJlc3NSZWcgICAgPD0gZGluOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kIGlmOwoKICAgICAgICAgICAgICAgICAgICAgICAgLS0weDUwIHJ3IGRiUm93V2lkdGhSZWcKICAgICAgICAgICAgICAgICAgICAgICAgd2hlbiB4IjE0IiA9PgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlYWR5ICAgPD0gJzEnOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvdXQgICAgPD0geCIwMDAwIiAmIGRiUm93V2lkdGhSZWc7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiB3ciA9ICcxJyB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYlJvd1dpZHRoUmVnICAgIDw9IGRpbiggMTUgZG93bnRvIDAgKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZCBpZjsKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgIHdoZW4gb3RoZXJzID0+CiAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWFkeSA8PSAnMSc7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBlbmQgY2FzZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICByZWdTdGF0ZSA8PSByc1dhaXRGb3JCdXNDeWNsZUVuZDsKICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIGVuZCBpZjsgLS0gY2UgPSAnMSc7CiAgICAgICAgICAgICAgCiAgICAgICAgICAgIHdoZW4gcnNXYWl0Rm9yQnVzQ3ljbGVFbmQgPT4KICAgICAgICAgICAKICAgICAgICAgICAgICAgIC0td2FpdCBmb3IgYnVzIGN5Y2xlIHRvIGVuZAogICAgICAgICAgICAgICAgaWYgY2UgPSAnMCcgdGhlbgogICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIHJlZ1N0YXRlIDw9IHJzV2FpdEZvclJlZ0FjY2VzczsKICAgICAgICAgICAgICAgICAgICByZWFkeSA8PSAnMCc7CiAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBlbmQgaWY7CiAgICAgICAgICAgICAgCiAgICAgICAgICAgIHdoZW4gb3RoZXJzID0+CiAgICAgICAgICAgCiAgICAgICAgICAgICAgICByZWdTdGF0ZSA8PSByc1dhaXRGb3JSZWdBY2Nlc3M7CiAgICAgICAgICAgICAgCiAgICAgICAgZW5kIGNhc2U7IC0tcmVnU3RhdGUgaXMKCiAgICBlbmQgaWY7IC0tcmVzZXQgPSAnMScsIHJpc2luZ19lZGdlKCBjbG9jayApCiAgICAgICAgIAplbmQgcHJvY2VzczsKCgpibGl0dGVyTWFpbjogcHJvY2VzcyggYWxsICkKCnZhcmlhYmxlIHNjUm93QWRkcmVzc1Zhcjogc3RkX2xvZ2ljX3ZlY3RvciggMzEgZG93bnRvIDAgKTsKCmJlZ2luCgogICAgaWYgcmVzZXQgPSAnMScgdGhlbgoKICAgICAgICAtLWZzbQogICAgICAgIGJsdFN0YXRlICAgICAgICA8PSBic0lkbGU7CiAgICAgICAgYmx0UmV0dXJuU3RhdGUgIDw9IGJzSWRsZTsKICAgICAgICBibHRSZWFkeSAgICAgICAgPD0gJzAnOwoKICAgICAgICAtLWRtYSAgICAKICAgICAgICBibHREbWFSZXF1ZXN0ICAgPD0gJzAnOwogICAgICAgIGJsdERtYVdvcmRTaXplICA8PSAnMCc7CiAgICAgICAgYmx0QSAgICAgICAgICAgIDw9ICggb3RoZXJzID0+ICcwJyApOwogICAgICAgIGJsdERvdXQgICAgICAgICA8PSAoIG90aGVycyA9PiAnMCcgKTsKICAgICAgICBibHRXciAgICAgICAgICAgPD0gJzAnOyAgICAgICAgICAgIAoKICAgICAgICAtLXN1YlJlYWQKICAgICAgICBkbWFSZWFkQWRkciAgICAgPD0gKCBvdGhlcnMgPT4gJzAnICk7CiAgICAgICAgZG1hUmVhZERhdGEgICAgIDw9ICggb3RoZXJzID0+ICcwJyApOwogICAgICAgIAogICAgICAgIC0tc3ViV3JpdGUKICAgICAgICBkbWFXcml0ZUFkZHIgICAgPD0gKCBvdGhlcnMgPT4gJzAnICk7CiAgICAgICAgZG1hV3JpdGVEYXRhICAgIDw9ICggb3RoZXJzID0+ICcwJyApOwoKICAgICAgICAtLWNvdW50ZXJzCiAgICAgICAgY291bnRlclggICAgICAgIDw9ICggb3RoZXJzID0+ICcwJyApOwogICAgICAgIGNvdW50ZXJYTWF4ICAgICA8PSAoIG90aGVycyA9PiAnMCcgKTsKICAgICAgICBjb3VudGVyWSAgICAgICAgPD0gKCBvdGhlcnMgPT4gJzAnICk7CgogICAgICAgIC0tZGF0YSBwb2ludGVycyAoIGZvciBtdWx0aXBsZSBzb3VyY2UgLyBkZXN0aW5hdGlvbiBtb2RlcyApCiAgICAgICAgZHBTYSAgICAgICAgICAgIDw9ICggb3RoZXJzID0+ICcwJyApOwogICAgICAgIGRwU2IgICAgICAgICAgICA8PSAoIG90aGVycyA9PiAnMCcgKTsKICAgICAgICBkcFNjICAgICAgICAgICAgPD0gKCBvdGhlcnMgPT4gJzAnICk7CiAgICAgICAgZHBEYSAgICAgICAgICAgIDw9ICggb3RoZXJzID0+ICcwJyApOwogICAgICAgIGRwRGIgICAgICAgICAgICA8PSAoIG90aGVycyA9PiAnMCcgKTsKICAgICAgICAgICAgCiAgICAgICAgLS1waXhlbCBhbHBoYQogICAgICAgIHBhQ29sb3JJbkEgICAgICA8PSAoIG90aGVycyA9PiAnMCcgKTsKICAgICAgICBwYUNvbG9ySW5CICAgICAgPD0gKCBvdGhlcnMgPT4gJzAnICk7CiAgICAgICAgcGFBbHBoYSAgICAgICAgIDw9ICggb3RoZXJzID0+ICcwJyApOwogICAgCiAgICBlbHNpZiByaXNpbmdfZWRnZSggY2xvY2sgKSB0aGVuCiAgICAKICAgICAgICAtLWNhbGN1bGF0ZSB0aGluZ3MgOikKICAgICAgICBzYUNvbEFkZCAgICA8PSBzdGRfbG9naWNfdmVjdG9yKCB1bnNpZ25lZCggc2FSb3dXaWR0aFJlZyApIC0gdW5zaWduZWQoIHNhV2lkdGhSZWcgKSApOwogICAgICAgIHNiQ29sQWRkICAgIDw9IHN0ZF9sb2dpY192ZWN0b3IoIHVuc2lnbmVkKCBzYlJvd1dpZHRoUmVnICkgLSB1bnNpZ25lZCggc2FXaWR0aFJlZyApICk7CiAgICAgICAgc2NDb2xBZGQgICAgPD0gc3RkX2xvZ2ljX3ZlY3RvciggdW5zaWduZWQoIHNjUm93V2lkdGhSZWcgKSAtIHVuc2lnbmVkKCBzYVdpZHRoUmVnICkgKTsKICAgICAgICAKICAgICAgICBkYUNvbEFkZCAgICA8PSBzdGRfbG9naWNfdmVjdG9yKCB1bnNpZ25lZCggZGFSb3dXaWR0aFJlZyApIC0gdW5zaWduZWQoIGRhV2lkdGhSZWcgKSApOwogICAgICAgIGRiQ29sQWRkICAgIDw9IHN0ZF9sb2dpY192ZWN0b3IoIHVuc2lnbmVkKCBkYlJvd1dpZHRoUmVnICkgLSB1bnNpZ25lZCggZGFXaWR0aFJlZyApICk7CiAgICAgICAgICAgCiAgICAKICAgICAgICBjYXNlIGJsdFN0YXRlIGlzCiAgICAgICAgCiAgICAgICAgICAgIHdoZW4gYnNJZGxlID0+CiAgICAgICAgCiAgICAgICAgICAgICAgICAtLXJlYWR5LCB3YWl0aW5nIGZvciBjb21tYW5kCiAgICAgICAgICAgICAgICBibHRSZWFkeSAgICA8PSAnMSc7ICAgIAogICAgICAgIAogICAgICAgICAgICAgICAgaWYgYmx0UnVuID0gJzEnIHRoZW4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIGJsdFJlYWR5ICAgIDw9ICcwJzsgICAgCgogICAgICAgICAgICAgICAgICAgIGNhc2UgY29tbWFuZFJlZyggMTUgZG93bnRvIDggKSBpcwogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgLS1maWxsIHJlY3RhbmdsZSAoIGlucHV0MFJlZyA9PiBkYSApCiAgICAgICAgICAgICAgICAgICAgICAgIHdoZW4geCIwMSIgPT4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtLXRyYW5zbGF0ZSBhZGRyZXNzIHRvIHdvcmQgYmFzZWQsIG9taXQgaGlnaCBhZGRyZXNzIGJpdHMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRtYVdyaXRlQWRkciAgICA8PSBkYUFkZHJlc3NSZWcoIDI1IGRvd250byAxICk7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgLS1jYWxjIHRyYW5zZmVyIHNpemUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvdW50ZXJYTWF4ICAgICA8PSBkYVdpZHRoUmVnOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgY291bnRlclggICAgICAgIDw9IGRhV2lkdGhSZWc7CiAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3VudGVyWSAgICAgICAgPD0gc3RkX2xvZ2ljX3ZlY3RvciggdW5zaWduZWQoIGRhSGVpZ2h0UmVnICkgLSAxICk7CiAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJsdFN0YXRlICAgICAgICA8PSBic0ZpbGwwOyAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIC0tY29weSByZWN0YW5nbGUgKCBzYSA9PiBkYSApCiAgICAgICAgICAgICAgICAgICAgICAgIHdoZW4geCIwMiIgPT4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtLXRyYW5zbGF0ZSBhZGRyZXNzZXMgdG8gd29yZCBiYXNlZCwgb21pdCBoaWdoIGFkZHJlc3MgYml0cwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZG1hUmVhZEFkZHIgICAgIDw9IHNhQWRkcmVzc1JlZyggMjUgZG93bnRvIDEgKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRtYVdyaXRlQWRkciAgICA8PSBkYUFkZHJlc3NSZWcoIDI1IGRvd250byAxICk7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgLS1jYWxjIHRyYW5zZmVyIHNpemUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvdW50ZXJYTWF4ICAgICA8PSBkYVdpZHRoUmVnOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgY291bnRlclggICAgICAgIDw9IGRhV2lkdGhSZWc7CiAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3VudGVyWSAgICAgICAgPD0gc3RkX2xvZ2ljX3ZlY3RvciggdW5zaWduZWQoIGRhSGVpZ2h0UmVnICkgLSAxICk7CiAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJsdFN0YXRlICAgICAgICA8PSBic0NvcHkwOyAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIC0tY29weSByZWN0YW5nbGUgd2l0aCBhbHBoYSAoIHNhIGFscGhhIHNiID0+IGRhICkKICAgICAgICAgICAgICAgICAgICAgICAgd2hlbiB4IjAzIiA9PgogICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYUFscGhhICAgICAgICAgPD0gaW5wdXQwUmVnKCA0IGRvd250byAwICk7CiAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0tdHJhbnNsYXRlIGFkZHJlc3NlcyB0byB3b3JkIGJhc2VkLCBvbWl0IGhpZ2ggYWRkcmVzcyBiaXRzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtLXVzZSBkYXRhIHBvaW50ZXJzIGZvciBzb3VyY2VzKCBtdWx0aXBsZSBzb3VyY2VzICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZHBTYSAgICAgICAgICAgIDw9IHNhQWRkcmVzc1JlZyggMjUgZG93bnRvIDEgKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRwU2IgICAgICAgICAgICA8PSBzYkFkZHJlc3NSZWcoIDI1IGRvd250byAxICk7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZG1hV3JpdGVBZGRyICAgIDw9IGRhQWRkcmVzc1JlZyggMjUgZG93bnRvIDEgKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtLWNhbGMgdHJhbnNmZXIgc2l6ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgY291bnRlclhNYXggICAgIDw9IGRhV2lkdGhSZWc7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3VudGVyWCAgICAgICAgPD0gZGFXaWR0aFJlZzsKICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvdW50ZXJZICAgICAgICA8PSBzdGRfbG9naWNfdmVjdG9yKCB1bnNpZ25lZCggZGFIZWlnaHRSZWcgKSAtIDEgKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgYmx0U3RhdGUgICAgICAgIDw9IGJzQWxwaGFDb3B5MDsgCgogICAgICAgICAgICAgICAgICAgICAgICAtLXNjYWxlIGNvcHkgcmVjdGFuZ2xlICggc2Egc2NhbGUgPT4gZGEgKQogICAgICAgICAgICAgICAgICAgICAgICAtLWlucHV0MFJlZyAtIHNvdXJjZURlbHRhWAogICAgICAgICAgICAgICAgICAgICAgICAtLWlucHV0MVJlZyAtIHNvdXJjZURlbHRhWQogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgd2hlbiB4IjA0IiA9PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0tdHJhbnNsYXRlIGFkZHJlc3NlcyB0byB3b3JkIGJhc2VkLCBvbWl0IGhpZ2ggYWRkcmVzcyBiaXRzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkbWFSZWFkQWRkciAgICAgPD0gc2FBZGRyZXNzUmVnKCAyNSBkb3dudG8gMSApOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZG1hV3JpdGVBZGRyICAgIDw9IGRhQWRkcmVzc1JlZyggMjUgZG93bnRvIDEgKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtLWNhbGMgdHJhbnNmZXIgc2l6ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgY291bnRlclhNYXggICAgIDw9IGRhV2lkdGhSZWc7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3VudGVyWCAgICAgICAgPD0gZGFXaWR0aFJlZzsKICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvdW50ZXJZICAgICAgICA8PSBzdGRfbG9naWNfdmVjdG9yKCB1bnNpZ25lZCggZGFIZWlnaHRSZWcgKSAtIDEgKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtLXJvdyBhZGRyZXNzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcFNhICAgICAgICAgICAgPD0gc2FBZGRyZXNzUmVnKCAyNSBkb3dudG8gMSApOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NTeCAgICAgICAgICAgIDw9ICggb3RoZXJzID0+ICcwJyApOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NTeSAgICAgICAgICAgIDw9IGlucHV0MVJlZzsgICAtLWRlbHRhIHkgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJsdFN0YXRlICAgICAgICA8PSBic1NjYWxlQ29weTA7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgd2hlbiBvdGhlcnMgPT4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBlbmQgY2FzZTsKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgZW5kIGlmOwogICAgICAgICAgICAgIAogICAgICAgICAgICB3aGVuIGJzRmlsbDAgPT4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgZG1hV3JpdGVEYXRhICAgIDw9IGlucHV0MFJlZzsKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaWYgY291bnRlclggLz0geCIwMDAwIiB0aGVuCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBibHRSZXR1cm5TdGF0ZSAgPD0gYnNGaWxsMTsKICAgICAgICAgICAgICAgICAgICBibHRTdGF0ZSAgICAgICAgPD0gYnNTdWJXcml0ZTA7CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAtLWVuZCBvZiByb3cKICAgICAgICAgICAgICAgICAgICBpZiBjb3VudGVyWSAvPSB4IjAwMDAiIHRoZW4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgY291bnRlclkgICAgICAgIDw9IHN0ZF9sb2dpY192ZWN0b3IoIHVuc2lnbmVkKCBjb3VudGVyWSApIC0gMSApOwogICAgICAgICAgICAgICAgICAgICAgICBjb3VudGVyWCAgICAgICAgPD0gY291bnRlclhNYXg7CiAgICAgICAgICAgICAgICAgICAgICAgIGRtYVdyaXRlQWRkciAgICA8PSBzdGRfbG9naWNfdmVjdG9yKCB1bnNpZ25lZCggZG1hV3JpdGVBZGRyICkgKyB1bnNpZ25lZCggZGFDb2xBZGQgKSApOwogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgYmx0U3RhdGUgICAgICAgIDw9IGJzSWRsZTsKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBlbmQgaWY7ICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgZW5kIGlmOwogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIHdoZW4gYnNGaWxsMSA9PgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGNvdW50ZXJYICAgICAgICA8PSBzdGRfbG9naWNfdmVjdG9yKCB1bnNpZ25lZCggY291bnRlclggKSAtIDEgKTsKICAgICAgICAgICAgICAgIGRtYVdyaXRlQWRkciAgICA8PSBzdGRfbG9naWNfdmVjdG9yKCB1bnNpZ25lZCggZG1hV3JpdGVBZGRyICkgKyAxICk7CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIGJsdFN0YXRlICAgICAgICA8PSBic0ZpbGwwOwogICAgICAgIAogICAgICAgICAgICB3aGVuIGJzQ29weTAgPT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIGlmIGNvdW50ZXJYIC89IHgiMDAwMCIgdGhlbgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgYmx0UmV0dXJuU3RhdGUgIDw9IGJzQ29weTE7CiAgICAgICAgICAgICAgICAgICAgYmx0U3RhdGUgICAgICAgIDw9IGJzU3ViUmVhZDA7CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAtLWVuZCBvZiByb3cKICAgICAgICAgICAgICAgICAgICBpZiBjb3VudGVyWSAvPSB4IjAwMDAiIHRoZW4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgY291bnRlclkgICAgICAgIDw9IHN0ZF9sb2dpY192ZWN0b3IoIHVuc2lnbmVkKCBjb3VudGVyWSApIC0gMSApOwogICAgICAgICAgICAgICAgICAgICAgICBjb3VudGVyWCAgICAgICAgPD0gY291bnRlclhNYXg7CgogICAgICAgICAgICAgICAgICAgICAgICBkbWFSZWFkQWRkciAgICAgPD0gc3RkX2xvZ2ljX3ZlY3RvciggdW5zaWduZWQoIGRtYVJlYWRBZGRyICkgKyB1bnNpZ25lZCggc2FDb2xBZGQgKSApOwogICAgICAgICAgICAgICAgICAgICAgICBkbWFXcml0ZUFkZHIgICAgPD0gc3RkX2xvZ2ljX3ZlY3RvciggdW5zaWduZWQoIGRtYVdyaXRlQWRkciApICsgdW5zaWduZWQoIGRhQ29sQWRkICkgKTsKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIGJsdFN0YXRlICAgICAgICA8PSBic0lkbGU7CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgZW5kIGlmOyAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIGVuZCBpZjsKCiAgICAgICAgICAgIHdoZW4gYnNDb3B5MSA9PgoKICAgICAgICAgICAgICAgIC0tY29weSBtb2RlCiAgICAgICAgICAgICAgICBjYXNlIGNvbW1hbmRSZWcoIDcgZG93bnRvIDAgKSBpcwogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgLS1jb3B5CiAgICAgICAgICAgICAgICAgICAgd2hlbiB4IjAwIiA9PgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICBkbWFXcml0ZURhdGEgICAgPD0gZG1hUmVhZERhdGE7CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgYmx0UmV0dXJuU3RhdGUgIDw9IGJzQ29weTI7CiAgICAgICAgICAgICAgICAgICAgICAgIGJsdFN0YXRlICAgICAgICA8PSBic1N1YldyaXRlMDsKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgLS1tYXNrIGNvcHkKICAgICAgICAgICAgICAgICAgICB3aGVuIHgiMDEiID0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgLS1jaGVjayBpZiBjb2xvciBtYXRjaGVzIG1hc2sKICAgICAgICAgICAgICAgICAgICAgICAgaWYgZG1hUmVhZERhdGEoIDE1IGRvd250byAwICkgPSBpbnB1dDBSZWcoIDE1IGRvd250byAwICkgdGhlbgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0tc2tpcCB3cml0ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgYmx0U3RhdGUgICAgICAgIDw9IGJzQ29weTI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgZWxzZQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0td3JpdGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRtYVdyaXRlRGF0YSAgICA8PSBkbWFSZWFkRGF0YTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgYmx0UmV0dXJuU3RhdGUgIDw9IGJzQ29weTI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBibHRTdGF0ZSAgICAgICAgPD0gYnNTdWJXcml0ZTA7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgZW5kIGlmOyAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIHdoZW4gb3RoZXJzID0+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIGRtYVdyaXRlRGF0YSAgICA8PSBkbWFSZWFkRGF0YTsKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIGJsdFJldHVyblN0YXRlICA8PSBic0NvcHkyOwogICAgICAgICAgICAgICAgICAgICAgICBibHRTdGF0ZSAgICAgICAgPD0gYnNTdWJXcml0ZTA7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIGVuZCBjYXNlOwogICAgICAgICAgICAgICAgCgogICAgICAgICAgICB3aGVuIGJzQ29weTIgPT4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBjb3VudGVyWCAgICAgICAgPD0gc3RkX2xvZ2ljX3ZlY3RvciggdW5zaWduZWQoIGNvdW50ZXJYICkgLSAxICk7CiAgICAgICAgICAgICAgICBkbWFSZWFkQWRkciAgICAgPD0gc3RkX2xvZ2ljX3ZlY3RvciggdW5zaWduZWQoIGRtYVJlYWRBZGRyICkgKyAxICk7CiAgICAgICAgICAgICAgICBkbWFXcml0ZUFkZHIgICAgPD0gc3RkX2xvZ2ljX3ZlY3RvciggdW5zaWduZWQoIGRtYVdyaXRlQWRkciApICsgMSApOwogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBibHRTdGF0ZSAgICAgICAgPD0gYnNDb3B5MDsKCgogICAgICAgICAgICB3aGVuIGJzQ29weTAgPT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIGlmIGNvdW50ZXJYIC89IHgiMDAwMCIgdGhlbgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgLS1zY1NjICs9IGRlbHRhWAogICAgICAgICAgICAgICAgICAgIHNjU3ggICAgICAgICAgICA8PSBzdGRfbG9naWNfdmVjdG9yKCB1bnNpZ25lZCggc2NTeCApICsgdW5zaWduZWQoIGlucHV0MFJlZyApICk7CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBibHRSZXR1cm5TdGF0ZSAgPD0gYnNTY2FsZUNvcHk0OwogICAgICAgICAgICAgICAgICAgIGJsdFN0YXRlICAgICAgICA8PSBic1N1YlJlYWQwOwogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgLS1lbmQgb2Ygcm93CiAgICAgICAgICAgICAgICAgICAgaWYgY291bnRlclkgLz0geCIwMDAwIiB0aGVuCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIGNvdW50ZXJZICAgICAgICA8PSBzdGRfbG9naWNfdmVjdG9yKCB1bnNpZ25lZCggY291bnRlclkgKSAtIDEgKTsKICAgICAgICAgICAgICAgICAgICAgICAgY291bnRlclggICAgICAgIDw9IGNvdW50ZXJYTWF4OwoKICAgICAgICAgICAgICAgICAgICAgICAgZHBTYSAgICAgICAgICAgIDw9IHNjUm93QWRkcmVzc1ZhciggMjQgZG93bnRvIDAgKTsKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIHNjU3ggICAgICAgICAgICA8PSAoIG90aGVycyA9PiAnMCcgKTsKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICBkbWFXcml0ZUFkZHIgICAgPD0gc3RkX2xvZ2ljX3ZlY3RvciggdW5zaWduZWQoIGRtYVdyaXRlQWRkciApICsgdW5zaWduZWQoIGRhQ29sQWRkICkgKTsKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgYmx0U3RhdGUgICAgICAgIDw9IGJzU2NhbGVDb3B5MTsgICAgLS13YWl0c3RhdGVzCiAgICAgICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICBibHRTdGF0ZSAgICAgICAgPD0gYnNJZGxlOwogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIGVuZCBpZjsgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBlbmQgaWY7CgogICAgICAgICAgICB3aGVuIGJzQ29weTEgPT4KCiAgICAgICAgICAgICAgICAtLWNvcHkgbW9kZQogICAgICAgICAgICAgICAgY2FzZSBjb21tYW5kUmVnKCA3IGRvd250byAwICkgaXMKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIC0tY29weQogICAgICAgICAgICAgICAgICAgIHdoZW4geCIwMCIgPT4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgZG1hV3JpdGVEYXRhICAgIDw9IGRtYVJlYWREYXRhOwogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIGJsdFJldHVyblN0YXRlICA8PSBic1NjYWxlQ29weTI7CiAgICAgICAgICAgICAgICAgICAgICAgIGJsdFN0YXRlICAgICAgICA8PSBic1N1YldyaXRlMDsKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgLS1tYXNrIGNvcHkKICAgICAgICAgICAgICAgICAgICB3aGVuIHgiMDEiID0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgLS1jaGVjayBpZiBjb2xvciBtYXRjaGVzIG1hc2sKICAgICAgICAgICAgICAgICAgICAgICAgaWYgZG1hUmVhZERhdGEoIDE1IGRvd250byAwICkgPSBpbnB1dDBSZWcoIDE1IGRvd250byAwICkgdGhlbgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0tc2tpcCB3cml0ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgYmx0U3RhdGUgICAgICAgIDw9IGJzQ29weTI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgZWxzZQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0td3JpdGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRtYVdyaXRlRGF0YSAgICA8PSBkbWFSZWFkRGF0YTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgYmx0UmV0dXJuU3RhdGUgIDw9IGJzU2NhbGVDb3B5MjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJsdFN0YXRlICAgICAgICA8PSBic1N1YldyaXRlMDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICBlbmQgaWY7ICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgd2hlbiBvdGhlcnMgPT4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgZG1hV3JpdGVEYXRhICAgIDw9IGRtYVJlYWREYXRhOwogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgYmx0UmV0dXJuU3RhdGUgIDw9IGJzU2NhbGVDb3B5MjsKICAgICAgICAgICAgICAgICAgICAgICAgYmx0U3RhdGUgICAgICAgIDw9IGJzU3ViV3JpdGUwOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBlbmQgY2FzZTsKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgd2hlbiBic0NvcHkyID0+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgY291bnRlclggICAgICAgIDw9IHN0ZF9sb2dpY192ZWN0b3IoIHVuc2lnbmVkKCBjb3VudGVyWCApIC0gMSApOwogICAgICAgICAgICAgICAgZG1hUmVhZEFkZHIgICAgIDw9IHN0ZF9sb2dpY192ZWN0b3IoIHVuc2lnbmVkKCBkbWFSZWFkQWRkciApICsgMSApOwogICAgICAgICAgICAgICAgZG1hV3JpdGVBZGRyICAgIDw9IHN0ZF9sb2dpY192ZWN0b3IoIHVuc2lnbmVkKCBkbWFXcml0ZUFkZHIgKSArIDEgKTsKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgYmx0U3RhdGUgICAgICAgIDw9IGJzU2NhbGVDb3B5MDsKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICB3aGVuIGJzQWxwaGFDb3B5MCA9PgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGlmIGNvdW50ZXJYIC89IHgiMDAwMCIgdGhlbgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgZG1hUmVhZEFkZHIgICAgIDw9IGRwU2E7CiAgICAgICAgICAgICAgICAgICAgYmx0UmV0dXJuU3RhdGUgIDw9IGJzQWxwaGFDb3B5MTsKICAgICAgICAgICAgICAgICAgICBibHRTdGF0ZSAgICAgICAgPD0gYnNTdWJSZWFkMDsKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIC0tZW5kIG9mIHJvdwogICAgICAgICAgICAgICAgICAgIGlmIGNvdW50ZXJZIC89IHgiMDAwMCIgdGhlbgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICBjb3VudGVyWSAgICAgICAgPD0gc3RkX2xvZ2ljX3ZlY3RvciggdW5zaWduZWQoIGNvdW50ZXJZICkgLSAxICk7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvdW50ZXJYICAgICAgICA8PSBjb3VudGVyWE1heDsKCiAgICAgICAgICAgICAgICAgICAgICAgIGRwU2EgICAgICAgICAgICA8PSBzdGRfbG9naWNfdmVjdG9yKCB1bnNpZ25lZCggZHBTYSApICsgdW5zaWduZWQoIHNhQ29sQWRkICkgKTsKICAgICAgICAgICAgICAgICAgICAgICAgZHBTYiAgICAgICAgICAgIDw9IHN0ZF9sb2dpY192ZWN0b3IoIHVuc2lnbmVkKCBkcFNiICkgKyB1bnNpZ25lZCggc2JDb2xBZGQgKSApOwogICAgICAgICAgICAgICAgICAgICAgICBkbWFXcml0ZUFkZHIgICAgPD0gc3RkX2xvZ2ljX3ZlY3RvciggdW5zaWduZWQoIGRtYVdyaXRlQWRkciApICsgdW5zaWduZWQoIGRhQ29sQWRkICkgKTsKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIGJsdFN0YXRlICAgICAgICA8PSBic0lkbGU7CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgZW5kIGlmOyAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIGVuZCBpZjsKICAgICAgICAgICAKICAgICAgICAgICAgd2hlbiBic0FscGhhQ29weTEgPT4KCiAgICAgICAgICAgICAgICBwYUNvbG9ySW5BICAgICAgPD0gZG1hUmVhZERhdGEoIDE1IGRvd250byAwICk7CiAgICAgICAgICAgICAgICBkbWFSZWFkQWRkciAgICAgPD0gZHBTYjsKICAgCiAgICAgICAgICAgICAgICAtLWFscGhhIGNvcHkgbW9kZQogICAgICAgICAgICAgICAgY2FzZSBjb21tYW5kUmVnKCA3IGRvd250byAwICkgaXMKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIC0tYWxwaGEgY29weQogICAgICAgICAgICAgICAgICAgIHdoZW4geCIwMCIgPT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIGJsdFJldHVyblN0YXRlICA8PSBic0FscGhhQ29weTI7CiAgICAgICAgICAgICAgICAgICAgICAgIGJsdFN0YXRlICAgICAgICA8PSBic1N1YlJlYWQwOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIC0tYWxwaGEgbWFzayBjb3B5CiAgICAgICAgICAgICAgICAgICAgd2hlbiB4IjAxIiA9PgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgLS1jaGVjayBpZiBjb2xvciBtYXRjaGVzIG1hc2sKICAgICAgICAgICAgICAgICAgICAgICAgaWYgZG1hUmVhZERhdGEoIDE1IGRvd250byAwICkgPSBpbnB1dDFSZWcoIDE1IGRvd250byAwICkgdGhlbgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0tc2tpcCByZWFkIGFuZCB3cml0ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgYmx0U3RhdGUgICAgICAgIDw9IGJzQWxwaGFDb3B5NTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICBlbHNlCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgLS1jb250aW51ZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJsdFJldHVyblN0YXRlICA8PSBic0FscGhhQ29weTI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBibHRTdGF0ZSAgICAgICAgPD0gYnNTdWJSZWFkMDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgZW5kIGlmOyAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIHdoZW4gb3RoZXJzID0+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIGJsdFJldHVyblN0YXRlICA8PSBic0FscGhhQ29weTI7CiAgICAgICAgICAgICAgICAgICAgICAgIGJsdFN0YXRlICAgICAgICA8PSBic1N1YlJlYWQwOwogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIGVuZCBjYXNlOyAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgCiAgICAgICAgICAgIHdoZW4gYnNBbHBoYUNvcHkyID0+CgogICAgICAgICAgICAgICAgcGFDb2xvckluQiAgICAgIDw9IGRtYVJlYWREYXRhKCAxNSBkb3dudG8gMCApOwogICAgICAgICAgICAgICAgYmx0U3RhdGUgICAgICAgIDw9IGJzQWxwaGFDb3B5MzsKCiAgICAgICAgICAgIHdoZW4gYnNBbHBoYUNvcHkzID0+CiAgICAgICAgICAgICAgICBibHRTdGF0ZSAgICAgICAgPD0gYnNBbHBoYUNvcHk0OwoKICAgICAgICAgICAgd2hlbiBic0FscGhhQ29weTQgPT4KCiAgICAgICAgICAgICAgICBkbWFXcml0ZURhdGEgICAgPD0geCIwMDAwIiAmIHBhQ29sb3JPdXQ7CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIGJsdFJldHVyblN0YXRlICA8PSBic0FscGhhQ29weTU7CiAgICAgICAgICAgICAgICBibHRTdGF0ZSAgICAgICAgPD0gYnNTdWJXcml0ZTA7CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgd2hlbiBic0FscGhhQ29weTUgPT4KCiAgICAgICAgICAgICAgICBjb3VudGVyWCAgICAgICAgPD0gc3RkX2xvZ2ljX3ZlY3RvciggdW5zaWduZWQoIGNvdW50ZXJYICkgLSAxICk7CiAgICAgICAgICAgICAgICBkcFNhICAgICAgICAgICAgPD0gc3RkX2xvZ2ljX3ZlY3RvciggdW5zaWduZWQoIGRwU2EgKSArIDEgKTsKICAgICAgICAgICAgICAgIGRwU2IgICAgICAgICAgICA8PSBzdGRfbG9naWNfdmVjdG9yKCB1bnNpZ25lZCggZHBTYiApICsgMSApOwogICAgICAgICAgICAgICAgZG1hV3JpdGVBZGRyICAgIDw9IHN0ZF9sb2dpY192ZWN0b3IoIHVuc2lnbmVkKCBkbWFXcml0ZUFkZHIgKSArIDEgKTsKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgYmx0U3RhdGUgICAgICAgIDw9IGJzQWxwaGFDb3B5MDsKICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAtLSBzdWJyb3V0aW5lcwogICAgICAgICAgICAKICAgICAgICAgICAgLS0gcmVhZCBzdWJyb3V0aW5lCiAgICAgICAgICAgIHdoZW4gYnNTdWJSZWFkMCA9PgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGlmIGJsdERtYVJlYWR5ID0gJzEnIHRoZW4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIGJsdEEgICAgICAgICAgICA8PSBkbWFSZWFkQWRkcjsKICAgICAgICAgICAgICAgICAgICBibHRXciAgICAgICAgICAgPD0gJzAnOwogICAgICAgICAgICAgICAgICAgIGJsdERtYVJlcXVlc3QgICA8PSAnMSc7CiAgICAKICAgICAgICAgICAgICAgICAgICBibHRTdGF0ZSAgICAgICAgPD0gYnNTdWJSZWFkMTsKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIGVuZCBpZjsKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgIHdoZW4gYnNTdWJSZWFkMSA9PgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGlmIGJsdERtYVJlYWR5ID0gJzAnIHRoZW4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIGJsdERtYVJlcXVlc3QgICA8PSAnMCc7CiAgICAgICAgICAgICAgICAgICAgYmx0U3RhdGUgICAgICAgIDw9IGJzU3ViUmVhZDI7CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBlbmQgaWY7CgogICAgICAgICAgICB3aGVuIGJzU3ViUmVhZDIgPT4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpZiBibHREbWFSZWFkeSA9ICcxJyB0aGVuCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgZG1hUmVhZERhdGEgPD0gYmx0RGluOwogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIGJsdFN0YXRlICAgIDw9IGJsdFJldHVyblN0YXRlOwogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgZW5kIGlmOwogICAgICAgICAgICAKICAgICAgICAgICAgLS0gd3JpdGUgc3Vicm91dGluZSAgICAgICAKICAgICAgICAgICAgd2hlbiBic1N1YldyaXRlMCA9PgoKICAgICAgICAgICAgICAgIGlmIGJsdERtYVJlYWR5ID0gJzEnIHRoZW4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIGJsdEEgICAgICAgICAgICA8PSBkbWFXcml0ZUFkZHI7CiAgICAgICAgICAgICAgICAgICAgYmx0RE91dCAgICAgICAgIDw9IGRtYVdyaXRlRGF0YTsKCiAgICAgICAgICAgICAgICAgICAgYmx0V3IgICAgICAgICAgIDw9ICcxJzsKICAgICAgICAgICAgICAgICAgICBibHREbWFSZXF1ZXN0ICAgPD0gJzEnOwogICAgICAgIAogICAgICAgICAgICAgICAgICAgIGJsdFN0YXRlICAgICAgICA8PSBic1N1YldyaXRlMTsgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBlbmQgaWY7CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgd2hlbiBic1N1YldyaXRlMSA9PgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIGlmIGJsdERtYVJlYWR5ID0gJzAnIHRoZW4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIGJsdERtYVJlcXVlc3QgICA8PSAnMCc7CiAgICAgICAgICAgICAgICAgICAgYmx0U3RhdGUgICAgICAgIDw9IGJzU3ViV3JpdGUyOwogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgZW5kIGlmOwogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIHdoZW4gYnNTdWJXcml0ZTIgPT4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpZiBibHREbWFSZWFkeSA9ICcxJyB0aGVuCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBibHRTdGF0ZSAgICA8PSBibHRSZXR1cm5TdGF0ZTsKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIGVuZCBpZjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICB3aGVuIG90aGVycyA9PgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBibHRTdGF0ZSAgICA8PSBic0lkbGU7CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgZW5kIGNhc2U7IC0tYmx0U3RhdGUgaXMKICAgICAgICAKICAgIGVuZCBpZjsgLS0gcmVzZXQgPSAnMScsIHJpc2luZ19lZGdlKCBjbG9jayApICAgCgplbmQgcHJvY2VzczsKCi0tIHBsYWNlIHBpeGVsIGFscGhhCgpwaXhlbEFscGhhSW5zdDogcGl4ZWxBbHBoYQpwb3J0IG1hcCgKCiAgICByZXNldCAgICAgICA9PiByZXNldCwKICAgIGNsb2NrICAgICAgID0+IGNsb2NrLAoJIAkgCiAgICBjb2xvckluQSAgICA9PiBwYUNvbG9ySW5BLAogICAgY29sb3JJbkIgICAgPT4gcGFDb2xvckluQiwKICAgIGFscGhhICAgICAgID0+IHBhQWxwaGEsCiAgICBjb2xvck91dCAgICA9PiBwYUNvbG9yT3V0CgopOwogICAgCmVuZCBCZWhhdmlvcmFsOwoAAAAAAAAAAI+QAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAPVwAAAAAAAPRWAAAAAAAAAAAAAAAA8L8"
				],
				[
					40,
					1,
					"revert",
					null,
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAgAAAAAAABACAAAAAAAAAAAAAAAA8L8"
				]
			]
		}
	],
	"build_system": "",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/C++/C++ Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					"Run"
				]
			],
			[
				"Packages/C++/C++ Single File.sublime-build",
				""
			]
		],
		[
			[
				[
					"Packages/C++/C++ Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					"Run"
				],
				[
					"Packages/Makefile/Make.sublime-build",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"Clean"
				]
			],
			[
				"Packages/Makefile/Make.sublime-build",
				"Clean"
			]
		],
		[
			[
				[
					"Packages/C++/C++ Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					"Run"
				],
				[
					"Packages/Makefile/Make.sublime-build",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"Clean"
				],
				[
					"Packages/User/make run.sublime-build",
					""
				],
				[
					"Packages/User/make send.sublime-build",
					""
				]
			],
			[
				"Packages/User/make run.sublime-build",
				""
			]
		],
		[
			[
				[
					"Packages/C++/C++ Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					"Run"
				],
				[
					"Packages/Makefile/Make.sublime-build",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"Clean"
				],
				[
					"Packages/User/make send.sublime-build",
					""
				]
			],
			[
				"Packages/User/make send.sublime-build",
				""
			]
		],
		[
			[
				[
					"Packages/Makefile/Make.sublime-build",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"Clean"
				],
				[
					"Packages/User/make run.sublime-build",
					""
				],
				[
					"Packages/User/make send.sublime-build",
					""
				]
			],
			[
				"Packages/User/make send.sublime-build",
				""
			]
		],
		[
			[
				[
					"Packages/Makefile/Make.sublime-build",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"Clean"
				],
				[
					"Packages/User/make send.sublime-build",
					""
				]
			],
			[
				"Packages/User/make send.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"Package Control: ",
				"Package Control: Enable Package"
			],
			[
				"package control: install package",
				"Package Control: Install Package"
			],
			[
				"install package control",
				"Install Package Control"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 141.0,
		"history":
		[
			"help",
			"dir",
			"dire"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/A7BaseBoard/tangerineA7_200/tangerineA7_200.srcs/sources_1",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/A7BaseBoard/tangerineA7_200/tangerineA7_200.srcs/sources_1/new"
	],
	"file_history":
	[
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/A7BaseBoard/tangerineA7_200/tangerineA7_200.srcs/sources_1/new/nekoRv.vhd",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/A7BaseBoard/tangerineA7_200/tangerineA7_200.srcs/sources_1/new/usbHost.vhd",
		"/F/msys64/home/qubec/ProjektyGCCWindows/tangerineSOCEmulator/spiSdCardRegs.cpp",
		"/F/msys64/home/qubec/ProjektyGCCWindows/tangerineSOCEmulator/tgVideoOut.cpp",
		"/F/msys64/home/qubec/ProjektyGCCWindows/tangerineSOCEmulator/tangerine.cpp",
		"/F/msys64/home/qubec/ProjektyGCCWindows/tangerineSOCEmulator/emul.cpp",
		"/F/msys64/home/qubec/ProjektyGCCWindows/tangerineSOCEmulator/main.cpp",
		"/F/msys64/home/qubec/ProjektyGCCWindows/tangerineSOCEmulator/memio.h",
		"/F/msys64/home/qubec/ProjektyGCCWindows/tangerineSOCEmulator/emul.h",
		"/F/msys64/home/qubec/ProjektyGCCWindows/tangerineSOCEmulator/sdCard.cpp",
		"/F/msys64/home/qubec/ProjektyGCCWindows/tangerineSOCEmulator/tangerine.h",
		"/F/msys64/home/qubec/ProjektyGCCWindows/tangerineSOCEmulator/memio.cpp",
		"/F/msys64/home/qubec/ProjektyGCCWindows/tangerineSOCEmulator/srec.cpp",
		"/F/msys64/home/qubec/ProjektyGCCWindows/tangerineSOCEmulator/sdCard.h",
		"/F/msys64/home/qubec/ProjektyGCCWindows/tangerineSOCEmulator/disasm.cpp",
		"/F/msys64/home/qubec/ProjektyGCCWindows/tangerineSOCEmulator/gfTypes.h",
		"/F/msys64/home/qubec/ProjektyGCCWindows/tangerineSOCEmulator/disasm.h",
		"/F/msys64/home/qubec/ProjektyGCCWindows/tangerineSOCEmulator/usbHost.cpp",
		"/F/msys64/home/qubec/ProjektyGCCWindows/tangerineSOCEmulator/usbHostRegs.cpp",
		"/F/msys64/home/qubec/ProjektyGCCWindows/tangerineSOCEmulator/usbHostRegs.h",
		"/F/msys64/home/qubec/ProjektyGCCWindows/tangerineSOCEmulator/usbHost.h",
		"/F/msys64/home/qubec/ProjektyGCCWindows/tangerineSOCEmulator/tgVideoOut.h",
		"/F/msys64/home/qubec/ProjektyGCCWindows/tangerineSOCEmulator/rootRegs.cpp",
		"/F/msys64/home/qubec/ProjektyGCCWindows/tangerineSOCEmulator/rootRegs.h",
		"/F/msys64/home/qubec/ProjektyGCCWindows/tangerineSOCEmulator/sdramDmaRegs.h",
		"/F/msys64/home/qubec/ProjektyGCCWindows/tangerineSOCEmulator/sdramDmaRegs.cpp",
		"/F/msys64/home/qubec/ProjektyGCCWindows/tangerineSOCEmulator/spiSdCardRegs.h",
		"/F/msys64/home/qubec/ProjektyGCCWindows/tangerineSOCEmulator/srec.h",
		"/F/msys64/home/qubec/ProjektyGCCWindows/tangerineSOCEmulator/Makefile",
		"/F/msys64/home/qubec/ProjektyGCCWindows/tangerineSOCEmulator/spiSDCardRegs.h",
		"/F/msys64/home/qubec/ProjektyGCCWindows/tangerineSOCEmulator/spiSDCardRegs.cpp",
		"/F/msys64/home/qubec/ProjektyGCCWindows/tangerineSOCEmulator/sdramDma.h",
		"/F/msys64/home/qubec/ProjektyGCCWindows/tangerineSOCEmulator/sdramDma.cpp",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/A7BaseBoard/tangerineA7_200/Software/slideshow/main.cpp",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/A7BaseBoard/tangerineA7_200/Software/slideshow/ram.ld",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/A7BaseBoard/tangerineA7_200/Software/slideshow/Makefile",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/A7BaseBoard/tangerineA7_200/Software/gfxLib/bsp.cpp",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/A7BaseBoard/tangerineA7_200/Software/gfxLib/gfBitmap.cpp",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/A7BaseBoard/tangerineA7_200/Software/gfxLib/gfBitmap.h",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/A7BaseBoard/tangerineA7_200/Software/gfxLib/gfTypes.h",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/A7BaseBoard/tangerineA7_200/Software/gfxLib/bsp.h",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/TangNano20K/tangyRiscVSOC/tangyRiscVSOC/src/software/gfxLib/diskio.cpp",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/TangNano20K/tangyRiscVSOC/tangyRiscVSOC/src/software/gfxLib/gfBitmap.cpp",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/TangNano20K/tangyRiscVSOC/tangyRiscVSOC/src/software/gfxLib/bsp.cpp",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/TangNano20K/tangyRiscVSOC/tangyRiscVSOC/src/software/gfxLib/bsp.h",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/TangNano20K/tangyRiscVSOC/tangyRiscVSOC/src/software/gfxLib/gfTypes.h",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/TangNano20K/tangyRiscVSOC/tangyRiscVSOC/src/software/slideshow/Makefile",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/TangNano20K/tangyRiscVSOC/tangyRiscVSOC/src/software/slideshow/ram.ld",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/TangNano20K/tangyRiscVSOC/tangyRiscVSOC/src/software/slideshow/startup.S",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/C4BaseBoard/RiscVSOCQ13/sramController.vhd",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/C4BaseBoard/RiscVSOCQ13/software/gfxLib/osFile.cpp",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/C4BaseBoard/RiscVSOCQ13/software/gfxLib/bsp.h",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/C4BaseBoard/RiscVSOCQ13/software/gfxLib/bsp.cpp",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/C4BaseBoard/RiscVSOCQ13/software/slideshow/startup.S",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/C4BaseBoard/RiscVSOCQ13/software/gfxLib/diskio.h",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/C4BaseBoard/RiscVSOCQ13/software/slideshow/Makefile",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/C4BaseBoard/RiscVSOCQ13/software/slideshow/main.cpp",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/C4BaseBoard/RiscVSOCQ13/software/gfxLib/diskio.cpp",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/C4BaseBoard/RiscVSOCQ13/C4RiscVSOCTop.vhd",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/C4BaseBoard/RiscV/gfxLib/osUIEvents.h",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/C4BaseBoard/RiscV/gfxLib/usbHID.cpp",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/C4BaseBoard/RiscV/gfxLib/bsp.h",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/C4BaseBoard/RiscV/gfxLib/bsp.cpp",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/C4BaseBoard/RiscV/gfxLib/gfFont.h",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/C4BaseBoard/RiscV/gfxLib/gfFont.cpp",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/C4BaseBoard/RiscV/gfxLib/gfDrawing.h",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/C4BaseBoard/RiscV/gfxLib/gfJPEG.cpp",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/C4BaseBoard/RiscV/gfxLib/gfBitmap.cpp",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/C4BaseBoard/RiscV/gfxLibSlideshow/ram.ld",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/C4BaseBoard/RiscV/gfxLib/gfBitmap.h",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/C4BaseBoard/RiscV/gfxLib/gfDrawing.cpp",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/C4BaseBoard/RiscV/gfxLibSlideshow/main.cpp",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/C4BaseBoard/RiscV/gfxLibSlideshow/startup.S",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/C4BaseBoard/RiscV/gfxLibSlideshow/main.h",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/C4BaseBoard/RiscV/gfxLib/picojpeg.cpp",
		"/C/Users/qubec/AppData/Roaming/Sublime Text/Packages/User/make send.sublime-build",
		"/C/Users/qubec/AppData/Roaming/Sublime Text/Packages/User/Preferences.sublime-settings",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/C4BaseBoard/RiscV/gfxLibSlideshow/slideshowProject.sublime-project",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/C4BaseBoard/RiscV/gfxLibSlideshow/Makefile",
		"/C/Users/qubec/Documents/Development/ProjektyVHDL/C4BaseBoard/RiscV/usbHidTest/main.cpp"
	],
	"find":
	{
		"height": 28.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"0110011"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": true,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"file": "tangerineA7_200.srcs/sources_1/new/blitter.vhd",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 37006,
						"regions":
						{
						},
						"selection":
						[
							[
								578,
								578
							]
						],
						"settings":
						{
							"syntax": "Packages/VHDL Mode/Syntax/VHDL.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 286.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 28.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 219.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "tangerineA7_200_sublime.sublime-project",
	"replace":
	{
		"height": 52.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"F:\\msys64\\home\\qubec\\ProjektyGCCWindows\\tangerineSOCEmulator\\tangerine.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 177.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
